{"version":3,"sources":["../src/adaptive-content-grid.jsx"],"names":["AdaptiveGridItem","Content","props","paddingTop","paddingBottom","verticalAlign","contentGap","expandableContainerRef","display","width","position","onContentResize","children","AdaptiveGrid","state","contentHeight","padding","baseWidth","baseHeight","maxColumns","map","child","i","nodeName","attributes","minHeight","nextChild","NextChildComponent","nextChildAttributes","nextChildChildren","containerHeight","fullHeight","Math","ceil","container","expandableContainer","element","w","h","slice","clientHeight","setState","Component"],"mappings":"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","file":"adaptive-content-grid.js","sourcesContent":["import preact from 'preact';\r\nimport ResizeSensor from 'resize-sensor--preact';\r\nimport { AdaptiveGrid as DefaultAdaptiveGrid, AdaptiveGridItem } from './adaptive-grid';\r\n\r\nexport { AdaptiveGridItem };\r\n\r\n// wraps content of a grid into an expandable container and content container\r\n// and adds resize sensor on the content container\r\nfunction Content(props) {\r\n  var paddingTop, paddingBottom;\r\n  if (props.verticalAlign === 'middle') {\r\n    paddingTop = props.contentGap / 2;\r\n    paddingBottom = props.contentGap / 2;\r\n  }\r\n  else if (props.verticalAlign === 'bottom') {\r\n    paddingTop = props.contentGap;\r\n    paddingBottom = 0;\r\n  }\r\n  else {\r\n    paddingTop = 0;\r\n    paddingBottom = props.contentGap;\r\n  }\r\n  return (\r\n    <div\r\n      ref={props.expandableContainerRef}\r\n      style={{\r\n        display: 'inline-block',\r\n        width: '100%',\r\n        position: 'relative',\r\n        paddingTop: (paddingTop + 'px'),\r\n        paddingBottom: (paddingBottom + 'px')\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: 'inline-block',\r\n          width: '100%',\r\n          position: 'relative'\r\n        }}\r\n      >\r\n        <ResizeSensor onResize={props.onContentResize} />\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// this grid composes the regular adaptive grid to add the 'content' functionality\r\nexport class AdaptiveGrid extends preact.Component {\r\n  componentWillMount() {\r\n    this.state = {contentHeight: [], padding: []};\r\n  }\r\n\r\n  componentWillReceiveProps() {\r\n    this.state = {contentHeight: [], padding: []};\r\n  }\r\n\r\n  render() {\r\n    // for every content grid item, find the first element and wrap its children in the\r\n    // <Content /> wrapper\r\n    return (\r\n      <DefaultAdaptiveGrid\r\n        baseWidth={this.props.baseWidth}\r\n        baseHeight={this.props.baseHeight}\r\n        maxColumns={this.props.maxColumns}\r\n      >\r\n        {\r\n          this.props.children.map((child, i) => {\r\n            if (child.nodeName === AdaptiveGridItem) {\r\n              var props = child.attributes;\r\n              if (props && props.minHeight === 'content') {\r\n                // will be adding a <Content /> within the first child of grid item\r\n                var nextChild = child.children[0];\r\n                var NextChildComponent = nextChild.nodeName;\r\n                var nextChildAttributes = nextChild.attributes;\r\n                var nextChildChildren = nextChild.children;\r\n                // calculations:\r\n                var containerHeight = this.state.contentHeight[i] + this.state.padding[i];\r\n                var minHeight = (containerHeight || this.props.baseHeight);\r\n                var fullHeight = Math.ceil(minHeight / this.props.baseHeight) * this.props.baseHeight;\r\n                var container, expandableContainer;\r\n                // if everything's ok\r\n                if (minHeight > 0 && fullHeight > 0) {\r\n                  return (\r\n                    <AdaptiveGridItem\r\n                      {...props}\r\n                      minHeight={minHeight}\r\n                    >\r\n                      <div ref={(element) => container = element}>\r\n                        <NextChildComponent {...nextChildAttributes}>\r\n                          <Content\r\n                            expandableContainerRef={(element) => expandableContainer = element}\r\n                            contentGap={fullHeight - minHeight}\r\n                            verticalAlign={props.verticalAlign}\r\n                            onContentResize={(w,h)=>{\r\n                              var contentHeight = this.state.contentHeight.slice();\r\n                              var padding = this.state.padding.slice();\r\n                              contentHeight[i] = h;\r\n                              // at initial render, the padding will be container - content\r\n                              if (!padding[i]) {\r\n                                padding[i] = container.clientHeight - h;\r\n                              }\r\n                              // at all further renders, the padding will be container - expanded content\r\n                              else {\r\n                                padding[i] = container.clientHeight - expandableContainer.clientHeight;\r\n                              }\r\n                              this.setState({\r\n                                contentHeight: contentHeight,\r\n                                padding: padding\r\n                              });\r\n                            }}\r\n                          >\r\n                            {nextChildChildren}\r\n                          </Content>\r\n                        </NextChildComponent>\r\n                      </div>\r\n                    </AdaptiveGridItem>\r\n                  )\r\n                }\r\n              }\r\n            }\r\n            return child;\r\n          })\r\n        }\r\n      </DefaultAdaptiveGrid>\r\n    )\r\n  }\r\n};"]}