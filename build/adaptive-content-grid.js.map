{"version":3,"sources":["../src/adaptive-content-grid.jsx"],"names":["AdaptiveGridItem","ContentContainer","props","paddingTop","paddingBottom","verticalAlign","contentGap","expandableContainerRef","display","width","position","onContentResize","children","EmptyComponent","AdaptiveGrid","newChildren","map","mapChildren","style","visible","visibility","adaptiveGrid","adaptiveGridRef","baseWidth","baseHeight","maxColumns","child","i","nodeName","attributes","minHeight","needsResizing","undefined","nextChild","NextChildComponent","nextChildAttributes","nextChildChildren","containerHeight","state","contentHeight","padding","fullHeight","Math","ceil","refs","containerRef","element","container","expandableContainer","length","bind","bindAll","self","window","requestAnimationFrame","forceUpdate","w","h","makeVisible","slice","clientHeight","setState","Component"],"mappings":"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","file":"adaptive-content-grid.js","sourcesContent":["import preact from 'preact';\r\nimport ResizeSensor from 'resize-sensor--preact';\r\nimport { AdaptiveGrid as DefaultAdaptiveGrid, AdaptiveGridItem } from './adaptive-grid';\r\n\r\nexport { AdaptiveGridItem };\r\n\r\n// wraps content of a grid into an expandable container and content container\r\n// and adds resize sensor on the content container\r\nfunction ContentContainer(props) {\r\n  var paddingTop, paddingBottom;\r\n  if (props.verticalAlign === 'middle') {\r\n    paddingTop = props.contentGap / 2;\r\n    paddingBottom = props.contentGap / 2;\r\n  }\r\n  else if (props.verticalAlign === 'bottom') {\r\n    paddingTop = props.contentGap;\r\n    paddingBottom = 0;\r\n  }\r\n  else {\r\n    paddingTop = 0;\r\n    paddingBottom = props.contentGap;\r\n  }\r\n  return (\r\n    <div\r\n      ref={props.expandableContainerRef}\r\n      style={{\r\n        display: 'inline-block',\r\n        width: '100%',\r\n        position: 'relative',\r\n        paddingTop: (paddingTop + 'px'),\r\n        paddingBottom: (paddingBottom + 'px')\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: 'inline-block',\r\n          width: '100%',\r\n          position: 'relative'\r\n        }}\r\n      >\r\n        <ResizeSensor onResize={props.onContentResize} />\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// This component doesn't really matter\r\nfunction EmptyComponent(props) {\r\n  return <div>{ props.children }</div>;\r\n};\r\n\r\n// this grid composes the regular adaptive grid to add the 'content' functionality\r\nexport class AdaptiveGrid extends preact.Component {\r\n  render() {\r\n    var\r\n      newChildren = this.props.children.map(this.mapChildren),\r\n      style = this.visible ? {} : {\r\n        visibility: 'hidden'\r\n      }\r\n    ;\r\n    return (\r\n      <div style={style}>\r\n        <DefaultAdaptiveGrid\r\n          ref={(adaptiveGrid) => this.adaptiveGridRef = adaptiveGrid}\r\n          baseWidth={this.props.baseWidth}\r\n          baseHeight={this.props.baseHeight}\r\n          maxColumns={this.props.maxColumns}\r\n        >\r\n          { newChildren }\r\n        </DefaultAdaptiveGrid>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  mapChildren(child, i) {\r\n    if(!(this.props.baseWidth > 0))\r\n      return child\r\n    ;\r\n    if(!(this.props.baseHeight > 0))\r\n      return child\r\n    ;\r\n    if (child.nodeName !== AdaptiveGridItem)\r\n      return child\r\n    ;\r\n    if (!child.attributes)\r\n      return child\r\n    ;\r\n    if (child.attributes.minHeight !== 'content')\r\n      return child\r\n    ;\r\n    if (this.needsResizing === undefined) {\r\n      this.needsResizing = true;\r\n      this.visible = false;\r\n    }\r\n    var\r\n      nextChild = child.children[0]\r\n    ,\r\n      NextChildComponent = nextChild ? nextChild.nodeName : undefined\r\n    ,\r\n      nextChildAttributes = nextChild ? nextChild.attributes : undefined\r\n    ,\r\n      nextChildChildren = nextChild ? nextChild.children : undefined\r\n    ,\r\n      containerHeight = this.state.contentHeight[i] + this.state.padding[i]\r\n    ,\r\n      minHeight = (containerHeight || this.props.baseHeight)\r\n    ,\r\n      fullHeight = Math.ceil(minHeight / this.props.baseHeight) * this.props.baseHeight\r\n    ,\r\n      refs = {}\r\n    ,\r\n      containerRef = function(element) {\r\n        refs.container = element\r\n      }\r\n    ,\r\n      expandableContainerRef = function(element) {\r\n        refs.expandableContainer = element\r\n      }\r\n    ;\r\n    // Edge case for when there's no container for the content provided\r\n    if (typeof nextChild === 'string' || child.children.length !== 1) {\r\n      nextChild = <div>{ child.children }</div>;\r\n      NextChildComponent = nextChild.nodeName;\r\n      nextChildAttributes = nextChild.attributes;\r\n      nextChildChildren = nextChild.children;\r\n    }\r\n    return (\r\n      <AdaptiveGridItem\r\n        {...child.attributes}\r\n        minHeight={minHeight}\r\n      >\r\n        <div ref={containerRef}>\r\n          <NextChildComponent {...nextChildAttributes}>\r\n            <ContentContainer\r\n              expandableContainerRef={expandableContainerRef}\r\n              contentGap={fullHeight - minHeight}\r\n              verticalAlign={child.attributes.verticalAlign}\r\n              onContentResize={this.onContentResize(i, refs)}\r\n            >\r\n              {nextChildChildren}\r\n            </ContentContainer>\r\n          </NextChildComponent>\r\n        </div>\r\n      </AdaptiveGridItem>\r\n    )\r\n  }\r\n\r\n  bindAll() {\r\n    this.mapChildren = this.mapChildren.bind(this);\r\n    this.onContentResize = this.onContentResize.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.bindAll();\r\n    this.visible = true;\r\n    this.state = {contentHeight: [], padding: []};\r\n  }\r\n\r\n  // to avoid seeing overlap between grid items, we defer\r\n  // making grid visible by a few frames so that it has time\r\n  // to change sizes\r\n  makeVisible() {\r\n    var self = this;\r\n    window.requestAnimationFrame(function() {\r\n      window.requestAnimationFrame(function() {\r\n        window.requestAnimationFrame(function() {\r\n          self.visible = true;\r\n          self.forceUpdate();\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  // callback for when the content for an item is resized\r\n  onContentResize(i, refs) {\r\n    var self = this;\r\n    return function(w, h) {\r\n      if (self.needsResizing) {\r\n        self.needsResizing = false;\r\n        self.makeVisible();\r\n      }\r\n      var\r\n        contentHeight = self.state.contentHeight.slice()\r\n      ,\r\n        padding = self.state.padding.slice()\r\n      ;\r\n      contentHeight[i] = h;\r\n      // at initial render, the padding will be container - content\r\n      if (!(i in padding)) {\r\n        padding[i] = refs.container.clientHeight - h;\r\n      }\r\n      // at all further renders, the padding will be container - expanded content\r\n      else {\r\n        padding[i] = refs.container.clientHeight - refs.expandableContainer.clientHeight;\r\n      }\r\n      self.setState({\r\n        contentHeight: contentHeight,\r\n        padding: padding\r\n      });\r\n    };\r\n  }\r\n};"]}